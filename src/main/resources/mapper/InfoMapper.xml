<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.breeze.breezevideouser.mapper.InfoMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.breeze.breezevideouser.domain.Info">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="runtime" property="runtime" />
        <result column="type" property="type" />
        <result column="release_date" property="releaseDate" />
        <result column="intro" property="intro" />
        <result column="director" property="director" />
        <result column="writer" property="writer" />
        <result column="star" property="star" />
        <result column="budget" property="budget" />
        <result column="revenue" property="revenue" />
        <result column="language" property="language" />
        <result column="company" property="company" />
        <result column="country" property="country" />
        <result column="rating" property="rating" />
        <result column="rating_num" property="ratingNum" />
        <result column="tag" property="tag" />
        <result column="imdb_id" property="imdbId" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, name, runtime, type, release_date, intro, director, writer, star, budget, revenue, language, company, country, rating, rating_num, tag, imdb_id
    </sql>

    <sql id="infoVo_Select_List">
        SELECT
            info.id,
            NAME,
            runtime,
            TYPE,
            release_date,
            intro,
            director,
            writer,
            star,
            budget,
            revenue,
            LANGUAGE,
            company,
            country,
            rating,
            rating_num,
            tag,
            imdb_id,
            MAX ( CASE WHEN s3.object_name LIKE'poster%' THEN s3.object_name ELSE NULL END ) AS poster_url,
            MAX ( CASE WHEN s3.object_name LIKE'trailer%' THEN s3.object_name ELSE NULL END ) AS trailer_url
        FROM
            info
            INNER JOIN s3 ON info.ID = s3.movie_id
        WHERE
            ID IN
    </sql>

    <sql id="infoVo_GroupBy_Having_List">
        GROUP BY
            info.ID,
            NAME,
            runtime,
            TYPE,
            release_date,
            intro,
            director,
            writer,
            star,
            budget,
            revenue,
            LANGUAGE,
            company,
            country,
            rating,
            rating_num,
            tag,
            imdb_id
            HAVING
            MAX(CASE WHEN s3.object_name LIKE 'poster%' THEN s3.object_name ELSE NULL END) IS NOT NULL
            AND MAX(CASE WHEN s3.object_name LIKE 'trailer%' THEN s3.object_name ELSE NULL END) IS NOT NULL
    </sql>

    <select id="getAllBanner" resultType="com.breeze.breezevideouser.domain.vo.InfoVo">
        SELECT
            i.id,
            i.name,
            i.runtime,
            i.type,
            i.release_date,
            i.intro,
            i.director,
            i.writer,
            i.star,
            i.budget,
            i.revenue,
            i.language,
            i.company,
            i.country,
            i.rating,
            i.rating_num,
            i.tag,
            i.imdb_id,
            s3.movie_id,
            MAX(CASE WHEN s3.object_name LIKE 'poster%' THEN s3.object_name ELSE NULL END) AS poster_url,
            MAX(CASE WHEN s3.object_name LIKE 'trailer%' THEN s3.object_name ELSE NULL END) AS trailer_url
        FROM
            banner
                INNER JOIN info i ON banner.movie_id = i.id
                INNER JOIN s3 ON banner.movie_id = s3.movie_id
        GROUP BY
            i.id,
            i.name,
            i.runtime,
            i.type,
            i.release_date,
            i.intro,
            i.director,
            i.writer,
            i.star,
            i.budget,
            i.revenue,
            i.language,
            i.company,
            i.country,
            i.rating,
            i.rating_num,
            i.tag,
            i.imdb_id,
            s3.movie_id
    </select>
    
    <select id="topRated" resultType="com.breeze.breezevideouser.domain.vo.InfoVo">
         <include refid="infoVo_Select_List"/> (
            SELECT ID
            FROM
            info
            WHERE
            release_date IS NOT NULL AND rating > '7.0/10'
            )
            <include refid="infoVo_GroupBy_Having_List"/>
            ORDER BY
            CASE
                WHEN release_date ~ E'^\\d{4}.*' THEN
                to_date( release_date, 'YYYY' )
                WHEN release_date ~ E'^\\w+ \\d{1,2}, \\d{4} \\(.*\\)$' THEN
                to_date( regexp_replace( release_date, E'\\s*\\([^)]*\\)\\s*$', '' ), 'Month DD, YYYY' )
                WHEN release_date ~ E'^\\w+ \\d{4} \\(.*\\)$' THEN
                to_date( regexp_replace( release_date, E'\\s*\\([^)]*\\)\\s*$', '' ), 'Month YYYY' ) ELSE to_date( release_date, 'YYYY' )
            END DESC
            LIMIT 25
    </select>

    <sql id="orderBy_RatingNum_Rating">
        ORDER BY
        rating DESC,
        CASE
        WHEN RIGHT ( rating_num, 1 ) = 'M' THEN
        ( SUBSTRING ( rating_num, 1, LENGTH ( rating_num ) - 1 ) :: NUMERIC * 1000000 ) ELSE ( SUBSTRING ( rating_num, 1, LENGTH ( rating_num ) - 1 ) :: NUMERIC * 1000 )
        END DESC
    </sql>

    <select id="topRatedAndNumByType" resultType="com.breeze.breezevideouser.domain.vo.InfoVo">
        <include refid="infoVo_Select_List"/> (
        SELECT ID
        FROM
        info
        WHERE
        TYPE ILIKE CONCAT('%', #{type}, '%')
        <include refid="orderBy_RatingNum_Rating"/>
        )
        <include refid="infoVo_GroupBy_Having_List"/>
        <include refid="orderBy_RatingNum_Rating"/>
        LIMIT #{limit}
    </select>

    <select id="topNumType" resultType="com.breeze.breezevideouser.domain.vo.TypeVo">
        SELECT TYPE, COUNT ( TYPE ) AS type_count
        FROM
            ( SELECT info.ID, regexp_split_to_table( info.TYPE, E'\\|' ) AS TYPE FROM info ) T
        GROUP BY TYPE
        HAVING COUNT ( TYPE ) > #{countLimit}
        ORDER BY COUNT ( TYPE ) DESC
    </select>

    <select id="userFavorites" resultType="com.breeze.breezevideouser.domain.vo.InfoVo">
            SELECT
            info.ID,
            NAME,
            runtime,
            TYPE,
            release_date,
            intro,
            director,
            writer,
            star,
            budget,
            revenue,
            LANGUAGE,
            company,
            country,
            rating,
            rating_num,
            tag,
            imdb_id,
            MAX ( CASE WHEN s3.object_name LIKE'poster%' THEN s3.object_name ELSE NULL END ) AS poster_url,
            MAX ( CASE WHEN s3.object_name LIKE'trailer%' THEN s3.object_name ELSE NULL END ) AS trailer_url
            FROM
            info
            INNER JOIN s3 ON info.ID = s3.movie_id
            JOIN favorites ON info.ID = favorites.movie_id
            WHERE
            info.ID IN ( SELECT movie_id FROM favorites WHERE user_id = #{userId} )
            GROUP BY
            info.ID,
            NAME,
            runtime,
            TYPE,
            release_date,
            intro,
            director,
            writer,
            star,
            budget,
            revenue,
            LANGUAGE,
            company,
            country,
            rating,
            rating_num,
            tag,
            imdb_id,
            favorites.favorite_time,
            user_id
            HAVING
            user_id = #{userId}
            ORDER BY
            favorite_time DESC
    </select>

    <select id="getInfoByTypes" parameterType="java.util.List" resultType="com.breeze.breezevideouser.domain.vo.InfoVo">
        SELECT
        info.ID,
        NAME,
        runtime,
        TYPE,
        release_date,
        intro,
        director,
        writer,
        star,
        budget,
        revenue,
        LANGUAGE,
        company,
        country,
        rating,
        rating_num,
        tag,
        imdb_id,
        MAX ( CASE WHEN s3.object_name LIKE'poster%' THEN s3.object_name ELSE NULL END ) AS poster_url,
        MAX ( CASE WHEN s3.object_name LIKE'trailer%' THEN s3.object_name ELSE NULL END ) AS trailer_url
        FROM
        info
        INNER JOIN s3 ON info.ID = s3.movie_id
        JOIN favorites ON info.ID = favorites.movie_id
        WHERE
        <foreach collection="array" item="type" separator="OR">
            #{type} = ANY(string_to_array(type, '|'))
        </foreach>
        <include refid="infoVo_GroupBy_Having_List"/>
    </select>

</mapper>
